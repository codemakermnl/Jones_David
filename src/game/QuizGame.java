/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;

public class QuizGame extends javax.swing.JFrame  {
    
    public static final String ALPHABET = "ABC";

    private final List<Question> questions = new ArrayList<>();
    
    private int currentIndex = 0;
    
    private List<String> answers = new ArrayList<>();
    
    private final Map<Integer, UserAnswer> userAnswers = new HashMap<>();
    
    public QuizGame() {
        initComponents();
       
        setLocationRelativeTo(null);
        questions.add( new Question(1, "1 + 2 = ", Arrays.asList(new Choice("1"), new Choice("2"), new Choice("3", true)), "The answer is the highest number") );
        questions.add( new Question(2, "2 * 5 = ", Arrays.asList(new Choice("10", true), new Choice("20"), new Choice("30")), "The answer is the lowest number") );
        questions.add( new Question(3, "100 / 10 = ", Arrays.asList(new Choice("5"), new Choice("10", true), new Choice("15")), "The answer is not the highest but not the lowest") );
        questions.add( new Question(4, "100 - 25 = ", Arrays.asList(new Choice("25"), new Choice("50"), new Choice("75", true)), "The answer is the highest number") );
        questions.add( new Question(5, "30 + 25 = ", Arrays.asList(new Choice("55", true), new Choice("60"), new Choice("75")), "The answer is not the highest but not the lowest") );
        questions.add( new Question(6, "125 / 25 = ", Arrays.asList(new Choice("5", true), new Choice("6"), new Choice("7")), "The answer is lowest number") );
        questions.add( new Question(7, "125 - 25 = ", Arrays.asList(new Choice("75"), new Choice("100", true), new Choice("125")), "The answer is this number is divisible by 10") );
        questions.add( new Question(8, "50 * 5 = ", Arrays.asList(new Choice("225"), new Choice("250", true), new Choice("300")), "The answer is not the lowest but not the highest") );
        questions.add( new Question(9, "1000 - 120 = ", Arrays.asList(new Choice("880", true), new Choice("890"), new Choice("780")), "The answer is not the highest not the lowest") );
        questions.add( new Question(10, "500 / 2 = ", Arrays.asList(new Choice("250", true), new Choice("300"), new Choice("150")), "The answer is not the highest not the lowest") );
        
        answers = questions.stream().map(Question::getAnswer).collect(Collectors.toList());
        
        setCurrentQuestion(currentIndex);
        
        previousBtn.setEnabled(false);
    }
    
    private void setCurrentQuestion(final int currentIndex) {
        Question currentQuestion = questions.get(currentIndex);
        
        questionLabel.setText(currentQuestion.getQuestionNumber() + ")  " + currentQuestion.getQuestion());
        choiceABox.setText(ALPHABET.charAt(0) +")  "+ currentQuestion.getChoices().get(0).getChoice());
        choiceBBox.setText(ALPHABET.charAt(1) +")  " + currentQuestion.getChoices().get(1).getChoice());
        choiceCBox.setText(ALPHABET.charAt(2) +")  "+ currentQuestion.getChoices().get(2).getChoice());
        
        hintLabel.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent evt) {
                hintLabel.setText( currentQuestion.getHint() );
            }
            
            public void mouseExited(MouseEvent evt) {
                hintLabel.setText( "Show hint" );
            }
        });
        
        if( currentIndex > 0 && !previousBtn.isEnabled() ) {
            previousBtn.setEnabled(true);
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        questionLabel = new javax.swing.JLabel();
        choiceABox = new javax.swing.JCheckBox();
        choiceBBox = new javax.swing.JCheckBox();
        choiceCBox = new javax.swing.JCheckBox();
        hintLabel = new javax.swing.JLabel();
        previousBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Math Fun Quiz Game");
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        questionLabel.setText("Question");

        choiceABox.setText("jCheckBox1");
        choiceABox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceABoxActionPerformed(evt);
            }
        });

        choiceBBox.setText("jCheckBox1");
        choiceBBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceBBoxActionPerformed(evt);
            }
        });

        choiceCBox.setText("jCheckBox1");
        choiceCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceCBoxActionPerformed(evt);
            }
        });

        hintLabel.setText("Show Hint");

        previousBtn.setText("Previous");
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });

        nextBtn.setText("Next");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(choiceCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(choiceBBox, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(choiceABox, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(previousBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(58, 58, 58)
                                        .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(hintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 73, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(choiceABox, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(choiceBBox, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(choiceCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(hintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        setCurrentQuestion(--currentIndex);
        choiceABox.setSelected(false);
        choiceBBox.setSelected(false);
        choiceCBox.setSelected(false);
        
        setPreviouslySetAnswers();
        if( currentIndex <= 0 ) {
            previousBtn.setEnabled(false);
        }
    }//GEN-LAST:event_previousBtnActionPerformed

    
    private void setPreviouslySetAnswers() {
        if( userAnswers.containsKey(currentIndex+1) ) {
            UserAnswer userAnswer = userAnswers.get(currentIndex+1);
            switch(userAnswer.getChoiceNumber()) {
                case 1: 
                    choiceABox.setSelected(true);
                    break;
                case 2:
                    choiceBBox.setSelected(true);
                    break;
                default:
                    choiceCBox.setSelected(true);
                    break;
            }
        }
    }
    
    private int getScore() {
        int totalScore = 0;
        
        for( int i = 0; i < answers.size(); i++ ) {
            System.out.println("real answer: " + answers.get(i) + ", user answer: " + userAnswers.get(i+1).getAnswer());
            if( answers.get(i).equalsIgnoreCase(userAnswers.get(i+1).getAnswer()) ) {
                totalScore++;
            }
        }
        return totalScore;
    }
    
    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
            
        
        if( !choiceABox.isSelected() && !choiceBBox.isSelected() && !choiceCBox.isSelected() ) {
            JOptionPane.showMessageDialog(this,  "Please choose a choice", "No choice detected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if( !userAnswers.containsKey(currentIndex+1) ) {
            userAnswers.put(currentIndex+1, getUserAnswer() );
        }
        
        if( ++currentIndex >= questions.size() ) {
            userAnswers.forEach( (k,v) -> System.out.println("question " + k + ", answer: " + v) );
            
            JOptionPane.showMessageDialog(this,  "You got " + getScore() + " out of " + questions.size() + " questions. Now prepare for a bonus question!",
                    "Total Score + Bonus", JOptionPane.WARNING_MESSAGE);
            
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                Logger.getLogger(QuizGame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            this.dispose();;
            new FinalQuestion().setVisible(true);
            
            return;
        }
        
        setCurrentQuestion(currentIndex);
        choiceABox.setSelected(false);
        choiceBBox.setSelected(false);
        choiceCBox.setSelected(false);
    }//GEN-LAST:event_nextBtnActionPerformed

    
    private UserAnswer getUserAnswer() {
        List<Choice> choices = questions.get(currentIndex).getChoices();
        if( choiceABox.isSelected() ) {
            return new UserAnswer(choices.get(0).getChoice(), 1);
        }else if( choiceBBox.isSelected() ) {
            return new UserAnswer(choices.get(1).getChoice(), 2);
        }else {
            return new UserAnswer(choices.get(2).getChoice(), 3);
        }
    }
    
    private void choiceABoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceABoxActionPerformed
        
        if( choiceBBox.isSelected() || choiceCBox.isSelected() ) {
            JOptionPane.showMessageDialog(this,  "You must only click only ONE choice", "Multiple choice not allowed", JOptionPane.WARNING_MESSAGE);
            choiceABox.setSelected(false);
        }
        
    }//GEN-LAST:event_choiceABoxActionPerformed

    private void choiceBBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceBBoxActionPerformed
        if( choiceABox.isSelected() || choiceCBox.isSelected() ) {
            JOptionPane.showMessageDialog(this,  "You must only click only ONE choice", "Multiple choice not allowed", JOptionPane.WARNING_MESSAGE);
            choiceBBox.setSelected(false);
        }
    }//GEN-LAST:event_choiceBBoxActionPerformed

    private void choiceCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceCBoxActionPerformed
        if( choiceABox.isSelected() || choiceBBox.isSelected() ) {
            JOptionPane.showMessageDialog(this,  "You must only click only ONE choice", "Multiple choice not allowed", JOptionPane.WARNING_MESSAGE);
            choiceCBox.setSelected(false);
        }
    }//GEN-LAST:event_choiceCBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuizGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuizGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuizGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuizGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuizGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox choiceABox;
    private javax.swing.JCheckBox choiceBBox;
    private javax.swing.JCheckBox choiceCBox;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton nextBtn;
    private javax.swing.JButton previousBtn;
    private javax.swing.JLabel questionLabel;
    // End of variables declaration//GEN-END:variables
}
